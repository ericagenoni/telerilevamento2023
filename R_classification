# Classificazione dei dati di telerilevamento utilizzando il pacchetto RStoolbox

library(raster)
install.packages("RStoolbox")
library(RStoolbox)

# Impostiamo la directory di lavoro

setwd("C:/telerilevamento_2024") # Windows

# Importazione dei dati
so <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")

# Visualizziamo l'immagine modificando il parametro di "stretch", che modifica la scala dei colori in termini di luminosità
plotRGB(so, 1, 2, 3, stretch="lin")  # Stiramento lineare dei colori
plotRGB(so, 1, 2, 3, stretch="hist") # Stiramento basato sull'istogramma; questo sposta il punto centrale dei colori in termini di luminosità

# Classificazione dei dati solari
# Abbiamo i dati di riflettanza originali e vogliamo classificarli in tre classi.

# https://rspatial.org/raster/rs/4-unsupclassification.html
# Il primo passo per utilizzare la funzione di classificazione seguente consiste
# nel trasformare l'immagine e i suoi colori in una sequenza di valori continui. 
# Questo comporta la creazione di una tabella contenente tutti i valori. 
# La funzione getValues estrae i valori da un'immagine e li memorizza in una tabella.

# 1. Otteniamo tutti i singoli valori
singlenr <- getValues(so)
singlenr
# singlenr = singoli numeri
# La funzione getValues estrae ciascun pixel dall'immagine e lo converte in un formato vettoriale.
# Questi valori rappresentano le riflettanze su tutte le bande.

set.seed(99) # Imposta il seme per il generatore di numeri casuali (per riproducibilità)

# 2. Classificazione
kcluster <- kmeans(singlenr, centers = 3)
kcluster
# K-means opera su dati tabellari, raggruppando i pixel in base a classi.
# K-means: una tecnica che utilizza una serie di centroidi per raggruppare i pixel in classi in base alla media dei loro valori spettrali.
# I centroidi delle nuvole di punti vengono identificati, e vengono generate distanze corrispondenti al numero di nuvole di punti. 
# Più un pixel è vicino al centroide di una nuvola di punti, maggiore è la probabilità che quel pixel appartenga a quella nuvola di punti.

# 3. Assegna i valori al raster sulla base di 'so'
soclass <- setValues(so[[1]], kcluster$cluster) 
# Assegna nuovi valori a un oggetto raster.
# Riassegniamo i valori ottenuti sulla base dell'immagine precedente. 
# [[1]] utilizza una singola banda per memorizzare i valori di classificazione.
# La funzione kcluster ha vari componenti, tra cui utilizziamo il componente 'cluster'.

# Definiamo una palette di colori per visualizzare i dati classificati
cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(soclass, col=cl)

# Classificazione delle energie: 
# numero classe 1 (giallo) = livello energetico medio: 41,45 %
# numero classe 2 (nero) = livello energetico alto: 21,22 %
# numero classe 3 (rosso) = livello energetico basso: 37,33 %
# Questa è una classificazione non supervisionata, in cui specifichiamo solo il numero di classi.

# Qual è la percentuale di pixel con energia alta o bassa? Possiamo usare una frequenza.
frequencies <- freq(soclass)
frequencies
soclass # per vedere il numero di pixel dell'immagine
tot = 2221440
percentages = frequencies * 100 / tot
percentages

